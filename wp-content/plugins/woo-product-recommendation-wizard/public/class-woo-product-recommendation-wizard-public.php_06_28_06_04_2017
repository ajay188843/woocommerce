<?php

/**
 * The public-facing functionality of the plugin.
 *
 * @link       http://www.multidots.com
 * @since      1.0.0
 *
 * @package    Woo_Product_Recommendation_Wizard
 * @subpackage Woo_Product_Recommendation_Wizard/public
 */

/**
 * The public-facing functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
 * @package    Woo_Product_Recommendation_Wizard
 * @subpackage Woo_Product_Recommendation_Wizard/public
 * @author     Multidots <inquiry@multidots.in>
 */
class Woo_Product_Recommendation_Wizard_Public {

    /**
     * The ID of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $plugin_name    The ID of this plugin.
     */
    private $plugin_name;

    /**
     * The version of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $version    The current version of this plugin.
     */
    private $version;

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     * @param      string    $plugin_name       The name of the plugin.
     * @param      string    $version    The version of this plugin.
     */
    public function __construct($plugin_name, $version) {

        $this->plugin_name = $plugin_name;
        $this->version = $version;
    }

    /**
     * Register the stylesheets for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_styles() {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in Woo_Product_Recommendation_Wizard_Loader as all of the hooks are defined
         * in that particular class.
         *
         * The Woo_Product_Recommendation_Wizard_Loader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */
        wp_enqueue_style($this->plugin_name, plugin_dir_url(__FILE__) . 'css/woo-product-recommendation-wizard-public.css', array(), $this->version, 'all');
    }

    /**
     * Register the JavaScript for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_scripts() {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in Woo_Product_Recommendation_Wizard_Loader as all of the hooks are defined
         * in that particular class.
         *
         * The Woo_Product_Recommendation_Wizard_Loader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */
        wp_enqueue_script('productFrontRecommendationWizard', plugin_dir_url(__FILE__) . 'js/woo-product-recommendation-wizard-public.js', array('jquery'), $this->version, false);
        wp_localize_script('productFrontRecommendationWizard', 'MyAjax', array('ajaxurl' => admin_url('admin-ajax.php'), 'ajax_icon' => plugin_dir_url(__FILE__) . '/images/ajax-loader.gif'));
    }

    public function get_next_questions_front_side() {
        global $wpdb;
        if (!empty($_REQUEST['current_wizard_id']) && isset($_REQUEST['current_wizard_id'])) {
            $wizard_id = $_REQUEST['current_wizard_id'];
        } else {
            $wizard_id = '';
        }
        if (!empty($_REQUEST['current_question_id']) && isset($_REQUEST['current_question_id'])) {
            $current_question_id = $_REQUEST['current_question_id'];
        } else {
            $current_question_id = '';
        }
        ############ Question Result ############
        $question_result = $this->get_all_question_list($wizard_id);
        $question_id_array = array();
        if (!empty($question_result)) {
            foreach ($question_result as $question_result_data) {
                $question_id_array[] = $question_result_data->id;
            }
        }

        ############ All Selected Value ############
        if (!empty($_REQUEST['all_selected_value_id']) && isset($_REQUEST['all_selected_value_id'])) {
            $all_selected_value_id = $_REQUEST['all_selected_value_id'];
        } else {
            $all_selected_value_id = '';
        }

        ############ Get Next Questions ID ############
        $next_question_html = $this->get_next_button_front_side($wizard_id, $current_question_id, $all_selected_value_id);

        ############ Get Previous Questions ID ############
        $previous_question_html = $this->get_previous_button_front_side($wizard_id, $current_question_id, $all_selected_value_id);

        ############ Get Next Record ############
        $next_html = '';
        $next_html .= $this->ajax_get_question_list_based_on_next_and_previous($wizard_id, $current_question_id, $all_selected_value_id);
        $next_html .= '<div class="wprw-page-nav-buttons">';
        $next_html .= $previous_question_html;
        $next_html .= $next_question_html;
        $next_html .= '</div>';
        echo "true" . "||" . $next_html . "||" . json_encode($question_id_array);
        wp_die();
    }

    public function get_previous_questions_front_side() {
        global $wpdb;
        if (!empty($_REQUEST['current_wizard_id']) && isset($_REQUEST['current_wizard_id'])) {
            $wizard_id = $_REQUEST['current_wizard_id'];
        } else {
            $wizard_id = '';
        }
        if (!empty($_REQUEST['current_question_id']) && isset($_REQUEST['current_question_id'])) {
            $current_question_id = $_REQUEST['current_question_id'];
        } else {
            $current_question_id = '';
        }
        ############ Question Result ############
        $question_result = $this->get_all_question_list($wizard_id);
        $question_id_array = array();
        if (!empty($question_result)) {
            foreach ($question_result as $question_result_data) {
                $question_id_array[] = $question_result_data->id;
            }
        }

        ############ All Selected Value ############
        if (!empty($_REQUEST['all_selected_value_id']) && isset($_REQUEST['all_selected_value_id'])) {
            $all_selected_value_id = $_REQUEST['all_selected_value_id'];
        } else {
            $all_selected_value_id = '';
        }

        ############ Get Next Questions ID ############
        $next_question_html = $this->get_next_button_front_side($wizard_id, $current_question_id, $all_selected_value_id);

        ############ Get Previous Questions ID ############
        $previous_question_html = $this->get_previous_button_front_side($wizard_id, $current_question_id, $all_selected_value_id);

        ############ Get Previous Record ############
        $previous_html = '';
        $previous_html .= $this->ajax_get_question_list_based_on_next_and_previous($wizard_id, $current_question_id, $all_selected_value_id);
        $previous_html .= '<div class="wprw-page-nav-buttons">';
        $previous_html .= $previous_question_html;
        $previous_html .= $next_question_html;
        $previous_html .= '</div>';
        echo "true" . "||" . $previous_html . "||" . json_encode($question_id_array);
        wp_die();
    }

    public function get_previous_button_front_side($wizard_id, $current_question_id, $all_selected_value_id) {
        ############ Get Previous Questions ID ############
        global $wpdb;
        $questions_table_name = $wpdb->prefix . 'questions';
        $get_previous_id_qry = "";
        $get_previous_id_qry .= "SELECT *";
        $get_previous_id_qry .= " FROM " . $questions_table_name;
        $get_previous_id_qry .= " WHERE id=" . "(select max(id) from " . $questions_table_name . " where id < " . $current_question_id . ")";
        $get_previous_id_qry .= " AND wizard_id='" . $wizard_id . "'";
        $get_previous_id_rows = $wpdb->get_row($get_previous_id_qry);
        $previous_question_html = '';
        if (!empty($get_previous_id_rows) && $get_previous_id_rows != '0') {
            $get_previous_question_id = $get_previous_id_rows->id;
            $previous_question_html .= '<a class="wprw-button wprw-button-previous" id="wd_' . $wizard_id . '_que_' . $get_previous_question_id . '_cur_' . $current_question_id . '" href="javascript:void(0);">';
            $previous_question_html .= '<span class="wprw-back-advisor-label">Back</span>' . $get_previous_question_id;
            $previous_question_html .= '</a>';
        } else {
            $get_previous_question_id = '';
            $previous_question_html .='';
        }
        return $previous_question_html;
    }

    public function get_next_button_front_side($wizard_id, $current_question_id, $all_selected_value_id) {
        ############ Get Next Questions ID ############
        global $wpdb;
        $questions_table_name = $wpdb->prefix . 'questions';
        $get_next_id_qry = "";
        $get_next_id_qry .= "SELECT *";
        $get_next_id_qry .= " FROM " . $questions_table_name;
        $get_next_id_qry .= " WHERE id=" . "(select min(id) from " . $questions_table_name . " where id > " . $current_question_id . ")";
        $get_next_id_qry .= " AND wizard_id='" . $wizard_id . "'";
        $get_next_id_rows = $wpdb->get_row($get_next_id_qry);
        $next_question_html = '';
        if (!empty($get_next_id_rows) && $get_next_id_rows != '0') {
            $get_next_question_id = $get_next_id_rows->id;
            $next_question_html .= '<a class="wprw-button wprw-button-next wprw-button-inactive" id="wd_' . $wizard_id . '_que_' . $get_next_question_id . '_cur_' . $current_question_id . '" href="javascript:void(0);">';
            $next_question_html .= '<span class="">Next</span>' . $get_next_question_id;
            $next_question_html .= '</a>';
        } else {
            $get_next_question_id = '';
            $next_question_html .= '';
        }
        return $next_question_html;
    }

    public function ajax_get_question_list_based_on_next_and_previous($wizard_id, $current_question_id, $all_selected_value_id) {
        global $wpdb;
        $wizard_table_name = $wpdb->prefix . 'wizard';
        $questions_table_name = $wpdb->prefix . 'questions';
        $options_table_name = $wpdb->prefix . 'questions_options';

        $sel_qry = "";
        $sel_qry .= "SELECT *";
        $sel_qry .= " FROM " . $questions_table_name;
        $sel_qry .= " WHERE wizard_id='" . $wizard_id . "'";
        $sel_qry .= " AND id='" . $current_question_id . "'";
        $sel_qry .= " ORDER BY id ASC";
        $sel_rows = $wpdb->get_results($sel_qry);
        $ajax_html = '';
        if (!empty($sel_rows)) {
            foreach ($sel_rows as $sel_data) {
                $question_id = $sel_data->id;
                $question_name = $sel_data->name;
                $option_type = trim($sel_data->option_type);

                $sel_qry = "";
                $sel_qry .= "SELECT *";
                $sel_qry .= " FROM " . $options_table_name;
                $sel_qry .= " WHERE wizard_id='" . $wizard_id . "'";
                $sel_qry .= " AND question_id='" . $question_id . "'";
                $sel_qry .= " ORDER BY id ASC";
                $sel_rows = $wpdb->get_results($sel_qry);

                $ajax_html .= '<li class="wprw-question wprw-mandatory-question" id="ques_' . $question_id . '">';
                ############ Question Result ############
//                $ajax_html .= '<input type="hidden" name="all_selected_value_name" id="all_selected_value_id" value="' . $all_selected_value_id . '"/>';
                $ajax_html .= '<div class="wprw-question-text-panel">';
                $ajax_html .= '<div class="wprw-question-text">' . $question_name . '</div>';
                $ajax_html .= '</div>';
                $ajax_html .= '<ol wprw-radiobutton="" class="wprw-answers">';

                if (!empty($sel_rows)) {
                    $i = 0;
                    foreach ($sel_rows as $sel_data) {
                        $i++;
                        $option_id = $sel_data->id;
                        $option_name = $sel_data->option_name;
                        $option_image = $sel_data->option_image;
                        $option_attribute = $sel_data->option_attribute;
                        $option_attribute_value = $sel_data->option_attribute_value;

                        if ($option_type == 'radio') {
                            $div_answer_action_class = 'radio';
                        } else {
                            $div_answer_action_class = 'checkbox';
                        }
                        $ajax_html .= '<li class="wprw-answer wprw-selected-answer" id="opt_attr_' . $option_id . '">';
                        $ajax_html .= '<div class="wprw-answer-content wprw-answer-selector">';
                        if (!empty($option_image)) {
                            $ajax_html .= '<div class="wprw-answer-image wprw-answer-selector">';
                            $ajax_html .= '<img class="wprw-desktop-image wprw-active-image" src=' . $option_image . '>';
                            $ajax_html .= '</div>';
                        }
                        $ajax_html .= '<div class="wprw-answer-action wprw-action-element wprw-' . $div_answer_action_class . '">';
                        $ajax_html .= '<span class="wprw-answer-selector">';
                        if ($option_type == 'radio') {
                            $ajax_html .= '<input class="wprw-input" type="radio" value="' . $option_id . '" name="option_name" id="wd_' . $wizard_id . '_que_' . $question_id . '_opt_' . $option_id . '"> ';
                        } elseif ($option_type == 'checkbox') {
                            $ajax_html .= '<input class="wprw-input" type="checkbox" value="' . $option_id . '" name="' . $option_name . '" id="wd_' . $wizard_id . '_que_' . $question_id . '_opt_' . $option_id . '"> ';
                        }
                        $ajax_html .= '<span class="wprw-label-element wprw-answer-label">';
                        $ajax_html .= '<span class="wprw-answer-label wprw-label-element">' . $option_name . '</span>';
                        $ajax_html .= '</span>';
                        $ajax_html .= '</span>';
                        $ajax_html .= '</div>';
                        $ajax_html .= '</div>';
                        $ajax_html .= '</li>';
                    }
                }
                $ajax_html .= '</ol>';
                $ajax_html .= '</li>';
            }
        }

        return $ajax_html;
    }

    public function get_ajax_woocommerce_product_list() {
        global $product, $wpdb;
        $options_table_name = $wpdb->prefix . 'questions_options';

        if (!empty($_REQUEST['current_wizard_id']) && isset($_REQUEST['current_wizard_id'])) {
            $wizard_id = $_REQUEST['current_wizard_id'];
        } else {
            $wizard_id = '';
        }
        if (!empty($_REQUEST['current_question_id']) && isset($_REQUEST['current_question_id'])) {
            $question_id = $_REQUEST['current_question_id'];
        } else {
            $question_id = '';
        }
        if (!empty($_REQUEST['current_option_id']) && isset($_REQUEST['current_option_id'])) {
            $option_id = $_REQUEST['current_option_id'];
        } else {
            $option_id = '';
        }
        if (!empty($_REQUEST['all_selected_value']) && isset($_REQUEST['all_selected_value'])) {
            $all_selected_value = $_REQUEST['all_selected_value'];
        } else {
            $all_selected_value = '';
        }
        if (!empty($_REQUEST['current_selected_value']) && isset($_REQUEST['current_selected_value'])) {
            $current_selected_value = $_REQUEST['current_selected_value'];
        } else {
            $current_selected_value = $all_selected_value;
        }


        $sel_qry = "";
        $sel_qry .= "SELECT *";
        $sel_qry .= " FROM " . $options_table_name;
        $sel_qry .= " WHERE wizard_id='" . $wizard_id . "'";
//        $sel_qry .= " AND id='" . $current_selected_value . "'";
        $sel_qry .= " AND id IN (" . stripslashes($current_selected_value) . ")";
        //$sel_qry .= " AND id IN (" . stripslashes($all_selected_value) . ")";
        $sel_qry .= " ORDER BY id DESC";
        //echo "\n" . 'Current Selected Value ' . $current_selected_value;
        //echo "\n" . $sel_qry;
        $sel_rows = $wpdb->get_results($sel_qry);


        $fetch_attribute_value_array = array();
        $option_attribute_arr = array();
        $fetch_option_attribute_value_arr = array();
        foreach ($sel_rows as $sel_data) {
            $option_attribute = trim($sel_data->option_attribute);
            $fetch_option_attribute_value = trim($sel_data->option_attribute_value);
//            $fetch_attribute_value_array[] = trim($fetch_option_attribute_value);
            $option_attribute_arr[] = trim($sel_data->option_attribute);
            $fetch_option_attribute_value_arr[] = trim($sel_data->option_attribute_value);
            $fetch_attribute_value_array[][trim($option_attribute)] = trim($fetch_option_attribute_value); //for function
        }

        $fetch_oopt_att_val_n_arr = array();
        $check_oopt_att_val_n_arr = array();
        foreach ($option_attribute_arr as $opt_name_key => $opt_name_value) {
            foreach ($fetch_option_attribute_value_arr as $key => $value) {
                if ($opt_name_key == $key) {
                    if (array_key_exists($opt_name_value, $check_oopt_att_val_n_arr)) {
                        $i = 0;
                        foreach ($check_oopt_att_val_n_arr as $ft_key => $ft_value) {
                            $i++;
                            if ($opt_name_value == $ft_key) {
                                $fetch_oopt_att_val_n_arr[$opt_name_value] = $value . " | " . $ft_value;
                                $check_oopt_att_val_n_arr[$opt_name_value] = $value . " | " . $ft_value;
                            }
                        }
                    } else {
                        $fetch_oopt_att_val_n_arr[$opt_name_value] = $value;
                        $check_oopt_att_val_n_arr[$opt_name_value] = $value;
                    }
                }
            }
        }

        $sel_qry = "";
        $sel_qry .= "SELECT *";
        $sel_qry .= " FROM " . $options_table_name;
        $sel_qry .= " WHERE wizard_id='" . $wizard_id . "'";
        $sel_qry .= " AND id IN (" . stripslashes($all_selected_value) . ")";
        $sel_qry .= " ORDER BY id DESC";
        //echo "\n" . 'All Selected Value ' . $all_selected_value;
        //echo "\n" . $sel_qry;
        $all_sel_rows = $wpdb->get_results($sel_qry);

        $all_fetch_attribute_value_array = array();
        $all_option_attribute = array();
        $all_fetch_option_attribute_value_arr = array();
        $all_fetch_match_attribute_value_array = array();
        foreach ($all_sel_rows as $all_sel_data) {
            $all_option_single_attribute = trim($all_sel_data->option_attribute);
            $all_fetch_option_attribute_value = trim($all_sel_data->option_attribute_value);
            $all_fetch_option_attribute_value_arr[] = trim($all_sel_data->option_attribute_value);
            $all_option_attribute[] = trim($all_sel_data->option_attribute);
            $all_fetch_attribute_value_array[][trim($all_option_single_attribute)] = trim($all_fetch_option_attribute_value); //for function
            $all_fetch_match_attribute_value_array[trim($all_option_single_attribute)] = trim($all_fetch_option_attribute_value); //for function
        }

        $all_fetch_oopt_att_val_n_arr = array();
        $all_check_oopt_att_val_n_arr = array();
        foreach ($all_option_attribute as $all_opt_name_key => $all_opt_name_value) {
            foreach ($all_fetch_option_attribute_value_arr as $all_key => $all_value) {
                if ($all_opt_name_key == $all_key) {
                    if (array_key_exists($all_opt_name_value, $all_check_oopt_att_val_n_arr)) {
                        $i = 0;
                        foreach ($all_check_oopt_att_val_n_arr as $all_ft_key => $all_ft_value) {
                            $i++;
                            if ($all_opt_name_value == $all_ft_key) {
                                $all_fetch_oopt_att_val_n_arr[$all_opt_name_value] = $all_value . " | " . $all_ft_value;
                                $all_check_oopt_att_val_n_arr[$all_opt_name_value] = $all_value . " | " . $all_ft_value;
                            }
                        }
                    } else {
                        $all_fetch_oopt_att_val_n_arr[$all_opt_name_value] = $all_value;
                        $all_check_oopt_att_val_n_arr[$all_opt_name_value] = $all_value;
                    }
                }
            }
        }

        $products_result = $this->get_perfect_product_based_on_attribute_value($fetch_oopt_att_val_n_arr, $all_fetch_oopt_att_val_n_arr);
        $product_html = '';
        $product_html .= '<div class="main_all_prd_section">';
        if (!empty($products_result) && isset($products_result) && $products_result != 'false') {
            //            foreach ($products_result as $prd_data) {
            $product_html .= '<div class="wprw-product-headline">Products that fit your needs:</div>';
            $product_html .= '<div class="sub_prd_section" id="sub_prd_section_id">';
            foreach ($products_result as $prd_data => $prd_value) {
                $theid = $prd_value;
                $product = new WC_Product($theid);
                $variation_data = $product->get_attributes();
                foreach ($variation_data as $attribute) {
                    $custom_product_attributes_name[] = explode('|', $attribute['name']);
                    $custom_product_attributes[] = explode('|', $attribute['value']);
                    $custom_product_attributes_arr[][$theid] = $attribute['name'] . "||" . $attribute['value'];
                }

                $currency = '$';
                $regular_price = get_post_meta($theid, '_regular_price', true);
                $sale_price = get_post_meta($theid, '_sale_price', true);

                ######### Product Div Structure #########
                $product_html .= '<div class="prd_section" id="prd_' . $theid . '">';
                $product_html .= '<div class="prd_detail">';
                $product_html .= '<div class="prd_top_detail">';
                $product_html .= '<div class="prd_title left_title">';
                $product_html .= '<a class="woo-product-detail-link" href="' . get_the_permalink($theid) . '">' . get_the_title($theid) . '</a>';
                $product_html .= '</div>';
                $product_html .= '<div class="prd_compare right_compare">';
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '<div class="prd_middle_detail">';
                $product_html .= '<div class="prd_image left_image">';
                $product_html .= '<a class="woo-product-detail-link" href="' . get_the_permalink($theid) . '">' . woocommerce_get_product_thumbnail() . '</a>';
                $product_html .= '</div>';
                $product_html .= '<div class="prd_attribute middle_attribute">';
                $product_html .= '<div class="prd_attribute_list">';
                $product_html .= '<div class="prd-overlay-attributes">';
                $product_html .= $this->match_attribute_value_in_product_list($custom_product_attributes_arr, $all_fetch_match_attribute_value_array);
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '<div class="prd_price right_bottom_price">';
                $product_html .= '<div class="product-details">';
                $product_html .= '<div class="wprw-product-price">';
                $product_html .= '<span class="prd_sale_price">';
                $product_html .= $currency . " " . $sale_price;
                $product_html .= '</span>';
                $product_html .= '</div>';
                $product_html .= '<a class="wprw-button wprw-detail-button wprw-product-detail-link" href="' . get_the_permalink($theid) . '">';
                $product_html .= '<span class="prd_detail_name">Details</span>';
                $product_html .= '</a>';
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '</div>';
                $product_html .= '</div>';
            }
            echo "true" . "||" . $product_html . "||";
        } else {
            $product_html .= 'No List Available';
            echo "false" . "||" . $product_html . "||";
        }
        $product_html .= '</div>';
        $product_html .= '</div>';


        wp_die();
    }

    public function get_option_value_based_on_option_id($option_id) {
        global $wpdb;
        $options_table_name = $wpdb->prefix . 'questions_options';
        $sel_qry = "";
        $sel_qry .= "SELECT *";
        $sel_qry .= " FROM " . $options_table_name;
        $sel_qry .= " WHERE id='" . $option_id . "'";
        $sel_rows = $wpdb->get_row($sel_qry);
        if (!empty($sel_rows) && $sel_rows != '0') {
            $option_value = $sel_rows->option_attribute_value;
            return $option_value;
        }
    }

    public function get_all_question_list($wizard_id) {
        global $wpdb;
        $questions_table_name = $wpdb->prefix . 'questions';
        $sel_qry = "";
        $sel_qry .= "SELECT *";
        $sel_qry .= " FROM " . $questions_table_name;
        $sel_qry .= " WHERE wizard_id='" . $wizard_id . "'";
        $sel_qry .= " ORDER BY id ASC";
        $sel_rows = $wpdb->get_results($sel_qry);
        return $sel_rows;
    }

    public function match_attribute_value_in_product_list($custom_product_attributes_arr, $all_fetch_match_attribute_value_array) {
        $match_attribute_result = '';
        $custom_product_value_explode = array();
        foreach ($custom_product_attributes_arr as $custom_product_key => $custom_product_value) {
            foreach ($custom_product_value as $custom_product_v_key => $custom_product_v_value) {
                $custom_product_value_explode[] = explode('||', $custom_product_v_value);
            }
        }

        $all_attribute_value_arr = array();
        $all_attribute_value_implode = array();
        foreach ($custom_product_value_explode as $arr_items => $arr_values) {
            $all_attribute_value_arr[$arr_values[0]] = explode('||', $arr_values[1]);
        }
        ####### Implode array value #######
        foreach ($all_attribute_value_arr as $all_attribute_key => $innerValue) {
            $all_attribute_value_implode[$all_attribute_key] = implode(',', $innerValue);
        }

        $i = 0;
        $all_attribute_value_ex = array();
        foreach ($all_attribute_value_implode as $all_attribute_key => $all_attribute_value) {
            $i++;
            if (strpos($all_attribute_value, '|') !== false) {
                $all_attribute_value_ex[$all_attribute_key] = explode('|', trim($all_attribute_value));
            } else {
                $all_attribute_value_implode = array($all_attribute_value);
                $all_attribute_value_ex[$all_attribute_key] = $all_attribute_value_implode;
            }
            foreach ($all_attribute_value_ex as $key => $value) {
                if (is_array($value)) {
                    foreach ($value as $v_key => $v_value) {
//                        $match_attribute_result .= "CDE" . $v_value;
//                        if (in_array(trim($v_value), $all_fetch_attribute_value_array)) {
//                            echo "If Match found";
//                        } else {
//                            echo "If Match not found";
//                        }
                        foreach ($all_fetch_match_attribute_value_array as $all_fetch_key => $all_fetch_value) {
                            if (trim($v_value) == trim($all_fetch_value)) {
                                $class = 'prd-positive-attr';
                            } else {
                                $class = 'prd-negative-attr';
                            }
                        }
//                        echo "\n" . $v_value;
//                        echo '<pre>';
//                        print_r($all_fetch_match_attribute_value_array);
//                        echo '</pre>';
                        if (in_array(trim($v_value), $all_fetch_match_attribute_value_array)) { //if (trim($option_attribute_value) == trim($custom_product_value_explode_value[1])) {
                            //$match_attribute_result .= "\n" . 'Available';
                            $class = 'prd-positive-attr';
                        } else {
                            $class = 'prd-negative-attr';
                        }
                    }
                }
            }
            //echo $class;
            $match_attribute_result .= '<span class="prd-attribute ' . $class . '">' . $all_attribute_key . ': ' . $all_attribute_value . '</span>';
        }

        return $match_attribute_result;
    }

    public function get_perfect_product_based_on_attribute_value($fetch_oopt_att_val_n_arr, $all_fetch_oopt_att_val_n_arr) {
        global $wpdb;
        $all_fetch_oopt_att_val_n_explode = array();
        foreach ($all_fetch_oopt_att_val_n_arr as $all_fin_key => $all_fin_value) {
            if (strpos($all_fin_value, '|') !== false) {
                $all_fetch_oopt_att_val_n_explode[$all_fin_key] = explode('|', trim($all_fin_value));
            } else {
                $all_fetch_oopt_att_val_n_explode[$all_fin_key] = array(trim($all_fin_value));
            }
        }
        $querydetails = "";
        $querydetails .= "SELECT *";
        $querydetails .= " FROM {$wpdb->prefix}posts";
        $querydetails .= " INNER JOIN {$wpdb->prefix}postmeta m1";
        $querydetails .= " ON ({$wpdb->prefix}posts.ID = m1.post_id)";
        $querydetails .= " WHERE";
        $querydetails .= " {$wpdb->prefix}posts.post_type = 'product'";
        $querydetails .= " AND {$wpdb->prefix}posts.post_status = 'publish'";
        $querydetails .= " AND (m1.meta_key = '_product_attributes')";
        foreach ($all_fetch_oopt_att_val_n_explode as $option_attribute_va_value_explode_key => $option_attribute_va_value_explode_value) {
            foreach ($option_attribute_va_value_explode_value as $opt_a__key => $opt_a_value) {
                $querydetails .= " AND m1.meta_value REGEXP '[[:<:]]" . trim($opt_a_value) . "[[:>:]]'";
            }
        }
        $querydetails .= " ORDER BY {$wpdb->prefix}posts.post_date";
        $querydetails .= " DESC";
        //echo "\n" . $querydetails;
        ob_start();
        $products_result = $wpdb->get_results($querydetails);
        $custom_product_attributes_arr = array();
        $custom_product_attributes_arr_arr = array();
        if (!empty($products_result)) {
            foreach ($products_result as $prd_data) {
                $theid = $prd_data->ID;
                $product = new WC_Product($theid);
                $variation_data = $product->get_attributes();
                foreach ($variation_data as $attribute) {
                    $custom_product_attributes_name[] = explode('|', $attribute['name']);
                    $custom_product_attributes[] = explode('|', $attribute['value']);
                    $custom_product_attributes_arr[][$theid] = $attribute['name'] . "||" . $attribute['value'];
                    $custom_product_attributes_arr_arr[$theid][$attribute['name']] = $attribute['value'];
                }
            }

//            echo '<pre>';
//            print_r($fetch_oopt_att_val_n_arr);
//            echo '</pre>';
//            echo '<pre>';
//            print_r($custom_product_attributes_arr_arr);
//            echo '</pre>';
//            $final_result_key = array();
//            foreach ($custom_product_attributes_arr_arr as $cpk_key => $cpk_value) {
//                $final_result_key[$cpk_key] = $cpk_key;
//            }
//            if (!empty($final_result_key) && isset($final_result_key)) {
//                return $final_result_key;
//            } else {
//                return 'false';
//            }

            $fetch_attribute_value_new_arr = array();
            $previousValue = array();
            $final_result_key = array();
            $j = 0;
            foreach ($fetch_oopt_att_val_n_arr as $fin_key => $fin_value) {
                if (strpos($fin_value, '|') !== false) {
                    $fin_value_explode = explode('|', trim($fin_value));
                } else {
                    $fin_value_explode = array(trim($fin_value));
                }
                $u = 0;
                foreach ($custom_product_attributes_arr_arr as $cpk_key => $cpk_value) {
                    foreach ($cpk_value as $cpk_v_key => $cpk_v_value) {
                        $u++;
                        if (strpos($cpk_v_value, '|') !== false) {
                            $cpk_value_explode = explode('|', trim($cpk_v_value));
                        } else {
                            $cpk_value_explode = array(trim($cpk_v_value));
                        }
                        $i = 0;
                        foreach ($fin_value_explode as $fin_1_key => $fin_1_value) {
                            foreach ($cpk_value_explode as $cpk_1_key => $cpk_1_value) {
                                $i++;
                                //echo "\n" . " Loop Count " . $i . "  Value  " . $fin_value . "  Prev Value " . $cpk_1_value;
                                if (trim($fin_1_value) == trim($cpk_1_value)) { //in_array(trim($fin_value), $cpk_value)
//                                    echo '<pre>';
//                                    print_r($previousValue);
//                                    echo '</pre>';
                                    if (!empty($previousValue) && $previousValue != '' && isset($previousValue)) {
                                        foreach ($previousValue as $prev_key => $prev_value) {
                                            if (trim($fin_value) == trim($cpk_v_value) && trim($prev_value) == trim($cpk_v_value)) { //trim($prev_value) == $cpk_1_value //in_array(trim($fin_value), $cpk_value)
                                                if (!empty($cpk_key)) {
                                                    $final_result_key[$cpk_key] = $cpk_key;
                                                }
                                            }
                                        }
                                    }
                                    if (!empty($cpk_key)) {
                                        $final_result_key[$cpk_key] = $cpk_key;
                                    }
                                    $previousValue[$cpk_v_key] = $cpk_v_value;
                                    $j++;
                                }
                            }
                        }
                    }
                }
            }
            if (!empty($final_result_key) && isset($final_result_key)) {
                return $final_result_key;
            } else {
                return 'false';
            }
        }
    }

}

?>
